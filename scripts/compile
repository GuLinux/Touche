#!/bin/bash
set -e
PROJECT_NAME="TouchÃ©"
GUI_PROJECT="$PROJECT_NAME"
GUI_NAME="Qt"
CORE_PROJECT="${PROJECT_NAME}_Core"
CONFIGURATION_PROJECT="${PROJECT_NAME}_Configuration"
BUILD_SUFFIX=".build"
COMPILE_MODE="release"
MAKE_INSTALL="sudo make install"

function dohelp() {
	echo -e "Usage: $0 [--kde] [--debug] [--dont-install] [--clean] [--help|-h]\n"
	echo -e "--kde:\t\tCompiles with KDE GUI (the \"pretty\" one)instead of the Qt one. Default if KDE is found"
	echo -e "--no-kde:\tDisables KDE GUI, using plain Qt. Default if KDE is not found"
	echo -e "--debug:\tEnables debug mode (useful if there are unexpected crashes)"
	echo -e "--dont-install:\tDisables installation to system"
	echo -e "--clean:\tRemoves build files"
	echo ""
	echo -e "You can also pass extra configuration to qmake by setting the QMAKE_APPEND_CFG variable."
	echo -e "For instance, to install the static libraries in the local directory, run this script as follows:"
	echo -e "QMAKE_APPEND_CFG=TMP_INSTALL_DIR=\$PWD/static_lib_install $0"
	echo ""
	exit
}

if which kde-config > /dev/null 2>/dev/null || which kde4-config > /dev/null 2>/dev/null; then
	echo "kde4 found"
	GUI_PROJECT="$PROJECT_NAME-kde"
	GUI_NAME="KDE"
fi
while test "x$*" != "x"; do
	CURRENT_OPTION="$1"; shift
	case "$CURRENT_OPTION" in
		"--kde")
		GUI_PROJECT="$PROJECT_NAME-kde"
		GUI_NAME="KDE"
		;;
		"--no-kde")
		GUI_NAME="Qt"
		GUI_PROJECT="$PROJECT_NAME"
		;;
		"--debug")
		COMPILE_MODE="debug"
		;;
		"--dont-install")
		MAKE_INSTALL="true"
		;;
		"--clean")
		DOCLEAN="true"
		;;
		"--help"|"-h")
		dohelp
		;;
	esac
done

QMAKE_CFG="CONFIG+=$COMPILE_MODE"
echo "Compiling with $GUI_NAME gui in $COMPILE_MODE mode"
if ! [ -d $GUI_PROJECT ] || ! [ -d $CORE_PROJECT ]; then
	echo "Error! this script must be executed from the root project directory"
	exit 1
fi

if test "x$DOCLEAN" == "xtrue"; then
	for file in $PROJECT_NAME*.build*; do
		echo "Removing $file ..."
		rm -rf "$file"
	done
	exit 0
fi

CORE_PROJECT_BUILD="${CORE_PROJECT}${BUILD_SUFFIX}-${COMPILE_MODE}"
GUI_PROJECT_BUILD="${GUI_PROJECT}${BUILD_SUFFIX}-${COMPILE_MODE}"
CONFIGURATION_PROJECT_BUILD="${CONFIGURATION_PROJECT}${BUILD_SUFFIX}-${COMPILE_MODE}"

mkdir -p "$CORE_PROJECT_BUILD" "$GUI_PROJECT_BUILD" "$CONFIGURATION_PROJECT_BUILD"

CORE_PROJECT="$( readlink -f "$CORE_PROJECT")"
CORE_PROJECT_BUILD="$( readlink -f "$CORE_PROJECT_BUILD")"
CONFIGURATION_PROJECT="$( readlink -f "$CONFIGURATION_PROJECT" )"
GUI_PROJECT="$( readlink -f "$GUI_PROJECT")"
GUI_PROJECT_BUILD="$( readlink -f "$GUI_PROJECT_BUILD")"
CONFIGURATION_PROJECT_BUILD="$( readlink -f "$CONFIGURATION_PROJECT_BUILD")"

cd "$CORE_PROJECT_BUILD"
qmake "$QMAKE_CFG" $QMAKE_APPEND_CFG "$CORE_PROJECT"
make all
cd "$CONFIGURATION_PROJECT_BUILD"
qmake "$QMAKE_CFG" $QMAKE_APPEND_CFG "$CONFIGURATION_PROJECT"
make all
cd "$GUI_PROJECT_BUILD" 
qmake "$QMAKE_CFG" $QMAKE_APPEND_CFG "$GUI_PROJECT"
make clean all
$MAKE_INSTALL
echo "Completed! you may now start using $PROJECT_NAME"
